{"version":3,"sources":["MyComponents/Mybutton.module.css","MyComponents/MyButton.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","MyButton","state","counter","text","handleClick","setState","console","warn","fetch","then","response","data","this","props","buttonTitle","valueName","className","style","btn","onClick","transform","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,IAAM,wB,8MC8DTC,E,2MAjDdC,MAAQ,CACPC,QAAS,EACTC,KAAK,I,EAgBNC,YAAc,WAEb,EAAKC,SAAS,CACbH,QAAS,EAAKD,MAAMC,QAAQ,K,mFAhBV,IAAD,OACnBI,QAAQC,KAAK,aACbC,MAAO,0BAA0BC,MAAK,SAAAC,GAAQ,OAAIA,EAASP,UAAQM,MAClE,SAACE,GACA,EAAKN,SACJ,CACCF,KAAKQ,S,+BAeC,IAAD,EAEwBC,KAAKC,MAA9BC,EAFC,EAEDA,YAAYC,EAFX,EAEWA,UACnB,OACC,6BACC,4BACCC,UAAWC,IAAMC,IACjBC,QAASP,KAAKR,YACda,MAAS,CACRG,UAAU,UAAD,OAAWR,KAAKX,MAAMC,QAAtB,UAGTY,GACF,6CACiBF,KAAKX,MAAMC,QAD5B,IACsCa,GAEtC,mC,GA3CmBM,IAAMC,W,MCEdC,MAVf,WACI,OACI,6BACI,kBAAC,EAAD,CAAUT,YAAa,WAAWC,UAAW,UAE7C,kBAAC,EAAD,CAAUD,YAAa,wBAAwBC,UAAY,kBCEnDS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACR,kBAAC,EAAD,CAAKhB,YAHc,SAGYC,UAAY,WAC3CgB,SAASC,eAAe,SDsHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.824c27a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Mybutton_btn__1dVNc\"};","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\n//\r\n// const MyFunctionalButton = function () {\r\n// \treturn (\r\n// \t\t<div>\r\n// \t\t\t<button type=\"submit\">Click</button>\r\n// \t\t</div>\r\n// \t)\r\n// };\r\n\r\nimport style from './Mybutton.module.css'\r\n\r\nclass MyButton extends React.Component {\r\n\tstate = {\r\n\t\tcounter: 0,\r\n\t\ttext:''\r\n\t};\r\n\r\ncomponentDidMount() {\r\n\tconsole.warn('Did mount');\r\n\tfetch( 'http://localhost:3000/').then(response => response.text()).then(\r\n\t\t(data) => {\r\n\t\t\tthis.setState(\r\n\t\t\t\t{\r\n\t\t\t\t\ttext:data,\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t);\r\n}\r\n\r\n\thandleClick = () => {\r\n\t\t// console.warn(\"Clicked\", this);\r\n\t\tthis.setState({\r\n\t\t\tcounter: this.state.counter+1,\r\n\t\t})\r\n\t\t// console.log(this.state.counter);\r\n\t};\r\n\r\n\trender() {\r\n\r\n\t\tconst {buttonTitle,valueName} = this.props;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName={style.btn}\r\n\t\t\t\t\tonClick={this.handleClick}\r\n\t\t\t\t\tstyle = {{\r\n\t\t\t\t\t\ttransform:`rotate(${this.state.counter}deg)`\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{buttonTitle}</button>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tCurrent value: {this.state.counter} {valueName}\r\n\t\t\t\t</p>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{/*{this.state.text}*/}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n};\r\nexport default MyButton;\r\n"," import React from 'react';\n // import ReactDOM from 'react-dom';\nimport MyButton from \"./MyComponents/MyButton\";\nimport './App.css';\n\nfunction App() {\n    return (\n        <div>\n            <MyButton buttonTitle ='click me' valueName ='click' />\n\n            <MyButton buttonTitle ='my super button click' valueName = 'super click' />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import MyButton from './MyComponents/MyButton';\nimport * as serviceWorker from './serviceWorker';\n\nconst buttonTitle = \"Submit\";\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n\t<App buttonTitle={buttonTitle} valueName ={'clicks'}/>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}